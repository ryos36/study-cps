(define g #f)
(define f0-p #f)
(define k3 'global-var)

(let ((p #f) (k0 3) (k1 4) (k2 5))
  (define (f0 a0 a1 a2)
    (set! k2 k0)
    (set! k0 (+ a0 a1 a2))
    (let ((k1 'masked)(k3 'closure))
      (define (p)
        (print `(,k0 ,k1 ,k2, k3)))
      p))
  (set! k2 10)
  (define (p)
    (print `(,k0 ,k1 ,k2, k3)))
  (define (f1 a0 a1 a2)
    (set! k0 a0)
    (set! k1 a1)
    (set! k2 a2))
  (set! g `(,f0 ,f1 ,p)))

(define f0 (car g))
(define f1 (cadr g))
(define p (caddr g))
(p)
(f1 1 2 3)
(p)
(set! f0-p (f0 4 5 6))
(p)
(f0-p)
(exit)
