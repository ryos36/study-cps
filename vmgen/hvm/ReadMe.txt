簡単な vmgen のサンプルになっています。

64bit Linux(ubuntu) の gforth 0.7.3 で動作確認をしました。

* 簡単な vmg の説明
vmg では \E で FORTH の構文を書くことが出来ます。
ただし、FORTH を知ることはないと vmgen のドキュメントは言っています。
vmgen の textinfo の 6章から読むといいと思います。

hvm.vmg では次のようにスタックを定義していますが使っていません
\E stack data-stack sp Cell

この記述によりスタックが使えるようになります。vmgen が自動生成する
ソースでは 宣言した Cellという構造体と sp という変数が使われる
ようになります。そのため、Cell という構造を C と sp を用意する必要
があります。

\E s" Operand"   single inst-stream type-prefix operand
Operand はここ(hvm.vmg)で勝手に考えた構造体です。operand という
キーワードを使うとこの構造体を使った C のソースが自動生成されます。
operand は inst-stream に関連すると定義しているので、
インストラクション側から読みだされるコードが生成されます。

FORTH 的な VM では data-stack と宣言してスタックを使った方が
良いかもしれません。

あとは実際の VM のインストラクションです。
operand に r0 などを使っていますが、vmgen では C のソース部分は
Don't Care なので C 側で適当につじつま合わせをします。
空行は書けないので、必要であれば {} でくくります。

add ( operand --  )
    regs[operand.r2] = regs[operand.r1] + regs[operand.r0];

halt ( operand -- )
{
    uint32_t rv;
    rv = regs[operand.r0];
    printf("halt %d\n", rv);
    return rv;
}

vmgen に hvm.vmg をかませると i の拡張子のファイルができます。

hvm-disasm.i   : 逆アセンブル用のコードです。今回は使っていません。
                 使い方は gforth の vmgen-ex か vmgen-ex2 を見てください
hvm-gen.i      : コード生成用の関数です。今回は main から直接使っています。
                 足りない関数は自分で用意します。support.c 参照。
                 main でファイルを呼んで malloc したインストラクション用の
                 配列にコードを積み上げていけばインタプリタが出来上がります。
                 vmgen-ex を参照の事
hvm-labels.i   : インストラクションの集まりです。INST_ADDR という C の
                 マクロを用意することでラベルの集まりを作ることが出来ます。
                 INST_ADDR は便利なようにどんなマクロを使っても構いません。
                 今回は gcc の && を大いに利用しています。
hvm-vm.i       : vm 本体。レジスタベースの VM のサンプルになっています。
                 使用されているマクロを用意する必要があります。
                 全部理解するのは大変なので、わからなくとも
                 だいたい vmgen-ex からコピーして実装してあります。
                 各 CPU に適したマクロを用意するのが望ましいみたいです。
                 gcc の && を使ったコーディングに依存しています。
                 汎用的に switch/case を使うようにもできます。(vmgen-ex 参照)
                 TOS のキャッシュを持っていますが、そもそもスタックを使って
                 いません。各自拡張してみてください。
                 スタックを使うのは vmgen の資料を見れば、そう難しくは
                 ないでしょう。

                 gforth 本体ではもっと複雑なことをしているらしく
                 arch/ の下に各CPU対応がなされています。arm はディレクトリ
                 だけあってなんか使われていない雰囲気です。
hvm-peephole.i : のぞきあな。コンパイラ的なことはしていません。未使用。
hvm-profile.i  : プロファイルもしてません。

&& をつかったスレッディング(スレッデッドコード)を作ったのですが、
OS が 64bit であったために、一つのインストラクションは 64bit と
メモリ効率が悪いものができてしまいました。
サブルーチン形式のスレッデッドコードにすべきなのでしょう。
誰かトライしてください。

2016年  2月  9日 火曜日 12:03:57 JST
@ryos36

追伸
あまり世の中で使用されていない（資料が少ない!!）vmgen ですが
python 用の VM もあるようです。本家の VM と入れ替えるようにできています。
vm-ceval_1.vmg という名です。vmgen の 0.7.3 ではエラーになってしまったので
メンテナンスされていないのかもしれません。
