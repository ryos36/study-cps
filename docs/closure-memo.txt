----------------------------------------------------------------
closure についての覚書(すぐ忘れるから)

FIX を評価した時に (scheme なら define を評価した時に)
その時点の自由変数を捕まえて closure のひな形としてセーブする。
コンパイラでないのならその時点の環境保存して関数名に関連付ける。
(cps-interp ではそうしている)
コンパイラなら真面目に自由変数だけ(上のだと全環境のになるので)
を選び出しておく

たとえば csi で
(let ((x 3)) (define (f0 y) x) (set! x 5) (f0 3))
を評価すると 答えは 5 になる。つまり(set! x 5) はクロージャーに
影響している。f0 を実行されたときにコピーされる。
 (let ((x 3)) (define (f0 y) (let ((rv x)) (set! x y) rv )) (set! x 5) (f0 3
 ))
 これも答えは 5
二回目の f0 はどうなるか？
答えは 3 。
つまり f は共通のクローじゃを使う。
(let ((x 3)) (define (f0 y) (let ((rv x)) (set! x y) rv )) (set! x 5) (f0 3 ) (set! x 10) (f0 4))
これは 10 になる。つまり set! でみているのも同じ x
だから
 (let ((x 3)) (define (f0 y) (let ((rv x)) (set! x y) rv )) (set! x 5) (f0 3 ) (set! x 10) (f0 4) x)
 これは 4 になる

ところが次のように define を複数回通すと状況は違ってくる。
この場合は実行するたびに define の階層が違うのでちがう f0 を生成する。

(define (f a b n)
  (if (= n 0)
    a
    (let ((x '(b)) (z 2))
      (define (f0 y)
        (if (symbolp y) (set! x (cons x y)))
        (set! b (+ b 4))
        (list a b x z))
      (set! a (cons f0 a))
      (f a (+ b b) (- n 1)))))

(define x (f '() 2 2))
