----------------------------------------------------------------
* isuue 1
define を fixh に変えているため、
自動的に追加され意味のないコードが生成される。
define はコードを置くだけにしないといけない。

* isuue 2
解決できないフリー変数があっても無視ししてしまう。
(+ x 4)
で x がどこにも宣言されていないケース。
最終的に vmgen まで行ってしまい、なぜかバイナリまで出力される。
<= エラーにもならないのでたちが悪い。

----------------------------------------------------------------
重大だが根本すぎて先送り
*
FIXS で関数呼び出し時に FIXS の関数の先頭ですべてを
record-ref して復元しているため、その最中で、spill を必要とする。
spill をした場合直後に FIXS のための POP をしてしまうので
スタックを破壊してしまう。
=> VM で spill が必要ではないくらいレジスタをとって回避

----------------------------------------------------------------
致命傷ではない軽微な問題

*
fixh で本体関数を呼ばなかった時関数自体を削除できるがしていない。

*
(:record-set! (:address x) 0  <num>)
に vm-codegen で対応していない気がする。

(:movei (:address x) r0)
(:record-set! r0 0 <num>)

にすべき？

----------------------------------------------------------------
暫定対応済み
*
:id のコード化
:id <num> <sym> 
が来た時に vm-codegen で変更し
:id (:addtribute (:address <sym>)) <num> <reg>
さらに vmgen で
loadi (:address <sym>) <reg>
record-set! <num> <reg>
movei <num> <reg>
に変更している

そのために <sym> を global 変数に追加した。
そうすると、そのあとの
(:+ x y)
などが (:+ (:address x) (:address y))
に変更されてしまうので、暫定的に
(:record-ref! x 0 r0)
といった :record-ref! で 最初の引数が global なものだけを
(:record-ref! (:address x) 0 r0)
と変更するように暫定対応した。

* 
SPILL において不要な FIXH で宣言された引数も spill の対象にしている。
使われていない場合は無視してよいので FIXH の引数は対象にしない方がよい?

*
(+ 4 5) の場合を vmgen が movei に変換している。
最適化を掛けて
(+ 4 r0) などは swap するようにした
(< 4 5) 等の比較は一部対応

* 
グローバル関数の呼び出し時に 
record-ref (:ADDRESS EXIT) 0 r0
のような疑似クロージャーを直接 :ADDRESS をつかって参照することがある。

現状は 
"record-ref-address"
"record-refi8-address"
を追加。根本的にはグローバルな変数、関数の対応が待たれる。
(APPG の追加が望ましい?と思われる。コード生成時に APPG を
 疑似クロージャへ変換する)

fixh に不要なコードが差し込まれそれが app exit をよぶ
その fix で最後に app exit がまず closure 変換で
((:RECORD-REF (EXIT 0) (|k-sym8|)
   ((:APP |k-sym8| (EXIT |sym26|)))

に変換される。このとき EXIT はグローバル関数である。
EXIT などのグルーバル以外の場合の 通常はどっかで定義されたシンボルで

(HEAP ((LABEL |:FUNC|) ....) (FUNC)...
    ....
    ....
    ((:RECORD-REF (FUNC 0) (|k-sym8|)
       ((:APP |k-sym8| (FUNC |sym26|)))

となるがグローバル関数の場合先立つ HEAP はない。
更に vm-codegen では

(:RECORD-REF (:ADDRESS EXIT) 0 :R7)
(:MOVEI (:ADDRESS EXIT) :R0)
(:MOVE :R8 :R1)
(:JUMP :R7)))

というコードが作成される。
対応としては record-ref の vm で :address に対応すること
(hvm 側での対応)
しかしこの場合は record-ref が address まで解釈してしまい
あまりかっこよくない。(そもそも RISC じゃないからいいともいえる)
暫定的に branch に record-ref の :address がきたら

(:MOVEI (:ADDRESS EXIT) :R7)
(:RECORD-REF :R7 0 :R7)

というコードに置き換えるバージョンを作ってみた(お蔵入り)。
生成されるコードは

(:MOVEI (:ADDRESS EXIT) :R7)
(:RECORD-REF :R7 0 :R7)
(:MOVEI (:ADDRESS EXIT) :R0)
(:MOVE :R8 :R1)
(:JUMP :R7)))

となりあまりにもおバカなのでお蔵入り(local branch に保存)となる。
つまり、クロージャ変換で app がグローバル関数へのジャンプであれば
record-ref を使わずに、、、load 命令はないから record-ref を
使うしかない。 すると vm-codegen のコード生成時に考慮することになるが

((:RECORD-REF (EXIT 0) (|k-sym8|)
   ((:APP |k-sym8| (EXIT |sym26|)))

record-ref のときは先読みして app があって既定の形をしているなら
という判断をしなくてならない。これは情報の損失を予測で埋めるという
あほな仕様になってしまう。
どちらにしろグローバル関数へのジャンプは特別になるので
APPG を導入した方がよいだろう（予定）
つまりクロージャ変換では
(:APPG :EXIT (EXIT |sym26|)
を生成し vm-codegen で
(:MOVEI (:ADDRESS EXIT) :R0)
(:RECORD-REF :R0 0 :R7)
(:MOVE :R8 :R1)
(:JUMP :R7)
と出力する。なお、EXIT などのグローバル関数は
(let ((func EXIT))
 ...
 ...
 (another-func func)

と関数の引数になることもあるので疑似クロージャはどこかに
存在しないといけないことに注意。(単純にグローバル専用にできない)

----------------------------------------------------------------
copy-tree/list はなるべく使わない方がよい。
    copy-tree/list に対して書き換える関数が定義されていると
    copy された瞬間にリンクを失う。
    例えば
        ... (:+ (<ARG0> <ARG1>) (<RV>) (....))) ...
        があり <ARG0> を置き換える関数があったとすると
        こぴされて
        ... (:+ (<ARG0> <ARG1>) (<RV>) (....))) ...
        と構成は同じものができるが先の関数はコピー前のリストに対する
        変換関数であるため。
        実際に let-transfer で問題が発生した
        let-transfer の延長で fix-transferがよばれ
        fix-transfer がコピー(copy-tree)してしまったために
        let-transfer の変数置き換えが機能しなかった。
        いまは fix-transfer の最後で copy するのをやめた

  でも結局 copy-tree は必須
    `(a b c) は必要ないが 
    `(a (b c)) は (b c) が共通になる
    `(a ,`(b c)) => okそう
    `(a (,b c))  => okそう

    clisp を検証してみた(仕様を確認すると実装依存だ、、、オーノー)
    `(a (,b 0))
　　定数が入ったている時に
    b/-> 0/nil
    の 0/nil を共有する。仕様を確認すると
　　`((,a b)...
     は (append (list a) (list 'b) nil) である。あるいは
     (append (list a) (list 'b)) あるいは
     (append (list a) '(b)) あるいは
     (cons a '(b)) あるいは
     (cons a (list 'b)) あるいは
     (cons a '(b))
     となっている。
     (append (list a) '(b)) が選択された場合
     '(b) を共有することになる。実装依存ということか？
     sbcl でも clisp でもそうだった。
     [1]> (defun f (a) `(a (,a z)))
     F
     [2]> (setf x0 (f 'x0))
     (A (X0 Z))
     [3]> (setf x1 (f 'x1))
     (A (X1 Z))
     [4]> (eq (cdadr x0) (cdadr x1))
     T
     なお、scheme では規定されていない模様。
     そうなるとますます copy-tree は必須。

scheme の複雑な closure にちゃんと対応しているか疑問
  closure の覚書参照の事。
　いまは fix で closure の元を env に関数名と共にポイントして置き
  app で copy-list で環境をコピーしている。
  copy-list であるため、情報は共有する。

scheme には /= がなかった
    mini-scheme では
    set! とかができないが
        set! は構文糖衣でできそうな気がする。
    なにを最小構成にするのかは scheme の規約で確認すべき。
    本格的な scheme を目指す。

define はスコープ破り
set! はスコープ破り(現時点の mini scheme は set! には対応していないが)
define は
    グローバル変数に対応しているのか？
    レジスタに対応しているのか？

